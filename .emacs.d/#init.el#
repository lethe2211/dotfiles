;’¸À’¸ì’´Ä’¶­
(set-language-environment "Japanese")
(setq default-input-method "MW32-IME")

;’Ê¸’»ú’¥³’¡¼’¥É
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8)

;’¥í’¡¼’¥É’¥Ñ’¥¹’¤Î’ÄÉ’²Ã
(add-to-list 'load-path "~/.emacs.d/site-lisp")

;’¥Õ’¥©’¥ó’¥È
;(set-face-font 'default "Takao’¥´’¥·’¥Ã’¥¯ 16")
;(set-default-font "Takao’¥´’¥·’¥Ã’¥¯")

;’µ¯’Æ°’»þ’¤Î’²è’ÌÌ’¤ò’É½’¼¨’¤·’¤Ê’¤¤
(setq inhibit-splash-screen t)

;’¥á’¥Ë’¥å’¡¼’¥Ð’¡¼’¤ò’É½’¼¨’¤·’¤Ê’¤¤
(menu-bar-mode 0)

;’¥Ä’¡¼’¥ë’¥Ð’¡¼’¤ò’É½’¼¨’¤·’¤Ê’¤¤
(tool-bar-mode 0)

; ’Áª’Âò’Éô’Ê¬’¤Î’¥Ï’¥¤’¥é’¥¤’¥È
(transient-mark-mode t) 

;’ÂÐ’±þ’¥«’¥Ã’¥³’¤Î’¥Ï’¥¤’¥é’¥¤’¥È
(show-paren-mode t)

;; yes or no’¤Ç’¤Ê’¤¯’¡¤y or n’¤Ç’Åú’¤¨’¤é’¤ì’¤ë’¤è’¤¦’¤Ë’¤¹’¤ë
(defalias 'yes-or-no-p 'y-or-n-p)

;’¥Ð’¥Ã’¥¯’¥¢’¥Ã’¥×’¥Õ’¥¡’¥¤’¥ë’¤Ï’ºî’¤é’¤Ê’¤¤
(setq make-backup-files nil)
(setq auto-save-default nil)

;’¥«’¡¼’¥½’¥ë’¤¬’¤É’¤Î’´Ø’¿ô’¤Î’Ãæ’¤Ë’¤¢’¤ë’¤«’¤ò’¥â’¡¼’¥É’¥é’¥¤’¥ó’¤Ë’É½’¼¨’¤¹’¤ë
(which-function-mode 1)

;; C-t’¤Ç’¥¦’¥£’¥ó’¥É’¥¦’¤Î’ÀÚ’¤ê’ÂØ’¤¨
(global-set-key "\C-t" 'other-window)

;3’¤Ä’°Ê’¾å’¤Î’¥¦’¥£’¥ó’¥É’¥¦’¤ò’³«’¤¤’¤Æ’¤¤’¤ë’»þ’¡¤C-x o’¤Ç’¥Ý’¥Ã’¥×’¥¢’¥Ã’¥×’É½’¼¨’¤·’¤Ê’¤¬’¤é’¥¦’¥£’¥ó’¥É’¥¦’¤ò’°Ü’Æ°’¤Ç’¤­’¤ë’¤è’¤¦’¤Ë’¤¹’¤ë(site-lisp’¤Ëpopup.el’¤Èpopup-select-window.el’¤¬’É¬’Í×)
(require 'popup)
(require 'popup-select-window)
(global-set-key "\C-xo" 'popup-select-window)
(setq popup-select-window-window-highlight-face '(:foreground "white" :background "orange"))

;; ELPA’¤Î’Àß’Äê
;; M-x package-install’¤Ç’¹¥’¤­’¤Ê’¥Ñ’¥Ã’¥±’¡¼’¥¸’¤ò’¥¤’¥ó’¥¹’¥È’¡¼’¥ë’¤Ç’¤­’¤ë
(when (require 'package nil t)
  (add-to-list 'package-archives
	       '("melpa" . "http://melpa.milkbox.net/packages/"))
  (add-to-list 'package-archives
	       '("ELPA" . "http://tromey.com/elpa/"))
  (package-initialize))

;C-x C-f /sudo:root@remote.alias:/path/to/file’¤Ç’¡¤’¤³’¤Î’Àß’Äê’¥Õ’¥¡’¥¤’¥ë’¤Î’Æâ’ÍÆ’¤ò’ÊÝ’»ý’¤·’¤¿’¤Þ’¤Þ’¡¤ssh’¤Î’¥ê’¥â’¡¼’¥È’¥Û’¥¹’¥È’¤Î’¥Õ’¥¡’¥¤’¥ë’¤òsudo’¸¢’¸Â’¤Ç’ÊÔ’½¸’¤¹’¤ë’¤³’¤È’¤¬’¤Ç’¤­’¤ë
(require 'tramp)
(add-to-list 'tramp-default-proxies-alist '("remote.alias" nil "/ssh:user@remote:"))

;;flymake
(require 'flymake)

;C++
(defun flymake-cc-init ()
  (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
         (local-file  (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
    (list "g++" (list "-Wall" "-Wextra" "-fsyntax-only" local-file))))

(push '("\\.cpp$" flymake-cc-init) flymake-allowed-file-name-masks)
(add-hook 'c++-mode-hook
          '(lambda ()
             (flymake-mode t)))

;; Python-flake
(require 'flymake-python-pyflakes)
(add-hook 'python-mode-hook 'flymake-python-pyflakes-load)

;C-h’¤Ç’¥«’¡¼’¥½’¥ë’Á°’¤Î1’Ê¸’»ú’¤ò’¾Ã’¤¹(BackSpace)
(global-set-key "\C-h" 'delete-backward-char)

;M-g’¤Ç’Æþ’ÎÏ’¤·’¤¿’¹Ô’¤Ë’¥¸’¥ã’¥ó’¥×’¤¹’¤ë
(global-set-key (kbd "M-g") 'goto-line)

;Ctrl+Meta+v’¤Ç1’¥Ú’¡¼’¥¸’¾å’¤Ë’¥¹’¥¯’¥í’¡¼’¥ë’¤¹’¤ë(’¥Ç’¥Õ’¥©’¥ë’¥È’¤ÎM-v’¤À’¤È’Ã¼’Ëö’¤È’¥­’¡¼’¥Ð’¥¤’¥ó’¥É’¤¬’¶¥’¹ç’¤¹’¤ë)
(global-set-key (kbd "C-M-v") 'scroll-down)

;Meta+n’¤Ç2’¹Ô’²¼’¡¤Meta+p’¤Ç2’¹Ô’¾å’¤Ë’°Ü’Æ°
(global-set-key "\M-n" '(lambda ()
			   (interactive)
			   (next-line 2)))
(global-set-key "\M-p" '(lambda ()
			  (interactive)
			  (previous-line 2)))

;autoinsert
;’¥Æ’¥ó’¥×’¥ì’¡¼’¥È’¤Ï~/emacs.d/template’¤Ë’ÃÖ’¤¯
(setq auto-insert-directory "~/.emacs.d/template/")
(load "autoinsert" t)
(setq auto-insert-alist
      (cons '("\\.cpp" . "template.cpp")
      (cons '("\\.py"  . "template.py")
	      auto-insert-alist)))
(add-hook 'find-file-hooks 'auto-insert)

;javascript-mode(site-lisp’¤Ëjavascript.el’¤¬’É¬’Í×)
(autoload 'javascript-mode "javascript" nil t)
(setq auto-mode-alist (cons '("\\.js$" . javascript-mode) auto-mode-alist))

;espresso-mode(site-lisp’¤Ëespresso.el’¤¬’É¬’Í×)
(autoload #'espresso-mode "espresso" "Start espresso-mode" t)
(add-to-list 'auto-mode-alist '("\\.js$" . espresso-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . espresso-mode))

; Interactively Do Things (highly recommended, but not strictly required)
(require 'ido)
(ido-mode t)

;; web-mode’¤Î’Àß’Äê(ELPA’¤Ë’¤è’¤ëweb-mode’¤Î’¥¤’¥ó’¥¹’¥È’¡¼’¥ë’¤¬’É¬’Í×)
(when (require 'web-mode nil t)
  ;; ’¼«’Æ°’Åª’¤ËWeb-mode’¤ò’µ¯’Æ°’¤·’¤¿’¤¤’³È’Ä¥’»Ò’¤ò’ÄÉ’²Ã’¤¹’¤ë
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ctp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  ;; Web-mode’¤Î’¥¤’¥ó’¥Ç’¥ó’¥È’Àß’Äê’ÍÑ’¥Õ’¥Ã’¥¯
  (defun Web-mode-hook ( )
    "Hooks for Web mode."
    (setq Web-mode-markup-indent-offset 2) ; HTML’¤Î’¥¤’¥ó’¥Ç’¥ó’¥È
    (setq Web-mode-css-indent-offset 2)	   ; CSS’¤Î’¥¤’¥ó’¥Ç’¥ó’¥È
    (setq Web-mode-code-indent-offset 2) ; JS, PHP, Ruby’¤Ê’¤É’¤Î’¥¤’¥ó’¥Ç’¥ó’¥È
    (setq Web-mode-comment-style 2)	 ; Web-mode’Æâ’¤Î’¥³’¥á’¥ó’¥È’¤Î’¥¤’¥ó’¥Ç’¥ó’¥È
    (setq Web-mode-style-padding 1)	   ; <style>’Æâ’¤Î’¥¤’¥ó’¥Ç’¥ó’¥È’³«’»Ï’¥ì’¥Ù’¥ë
    (setq Web-mode-script-padding 1)	   ; <script>’Æâ’¤Î’¥¤’¥ó’¥Ç’¥ó’¥È’³«’»Ï’¥ì’¥Ù’¥ë
    )
  (add-hook 'Web-mode-hook 'Web-mode-hook)
)

;; yaml-mode(ELPA’¤Ë’¤è’¤ëyaml-mode’¤Î’¥¤’¥ó’¥¹’¥È’¡¼’¥ë’¤¬’É¬’Í×)
(when (require 'yaml-mode nil t)
  (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode)))

; Rinari(rinari’¤Î’Æ³’Æþ’¤¬’É¬’Í×)
;(add-to-list 'load-path "~/.emacs.d/site-lisp/rinari")
;(require 'rinari)
;(add-to-list 'auto-mode-alist '("\\.erb$" . rinari-mode))

;’¹Ô’ÈÖ’¹æ’É½’¼¨(site-lisp’¤Ëlinum.el’¤¬’É¬’Í×)
(require 'linum)
(global-linum-mode)

;’Ê¸’»ú’¿ô’¤Î’¥«’¥¦’¥ó’¥È(site-lisp’¤Ëword-count.el’¤¬’É¬’Í×)
;M-+’¤Çword-count-mode’¤Ë’°Ü’¹Ô’¡¢’Ìá’¤ë
;M-space’¤Ç’¥«’¥¦’¥ó’¥È’¤Î’µ¯’ÅÀ’¤ò’Æ°’¤«’¤¹(’¤½’¤Î’Â¾’¾Ü’¤·’¤¯’¤Ïword-count.el’¤Ë’Àâ’ÌÀ’¤¢’¤ê)
(setq load-path (cons (expand-file-name "~/elisp") load-path))
(autoload 'word-count-mode "word-count"
  "Minor mode to count words." t nil)
(global-set-key "\M-+" 'word-count-mode)
